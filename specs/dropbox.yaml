###########################################################
#
#  Description of Dropbox Content API v1
#
#  License: MIT (see http://choosealicense.com/licenses/mit/)
#  Author: Vladimir Lyubitelev
#
swagger: '2.0'

# Description
info:
  version: 1.0.0
  title: Dropbox Content API v1
  description: |
      The Dropbox **Content API** is a part of [Dropbox Core API](https://www.dropbox.com/developers-v1/core/docs) with a separate
      end-point for file content management operations: `https://api-content.dropbox.com`

      The Dropbox **Core API** document (see `dropbox-core.yaml`) describes tokens management, account information,
      metadata retrieval and file operations.

      **OAuth note:** if you wish to try HTTP request directly from Swagger UI you have to authorize agains
      "Swagger UI Test App". This application is configured with following redirect URI:
        * `http://localhost:8000/o2c.html` - Swagger UI running at `localhost`, port `8000`
        * `http://localhost:8080/o2c.html` - Swagger UI running at `localhost`, port `8080`

      Last update: 2015-11-28
  termsOfService: https://www.dropbox.com/developers/reference/tos
  contact:
    name: Dropbox
    url: https://www.dropbox.com/developers

externalDocs:
  description: Developers documentation API v1
  url: https://www.dropbox.com/developers-v1/core/docs

host: api-content.dropbox.com
basePath: /1
schemes:
  - https

# Groups and their descriptions
tags:
  - name: files
    description: Files content management

# Security
securityDefinitions:
  dropbox_auth:
    description: |
        See Dropbox [OAuth official Guide](https://www.dropbox.com/developers/reference/oauthguide) and
        [Short Example](https://blogs.dropbox.com/developers/2013/07/using-oauth-2-0-with-the-core-api)
    type: oauth2
    authorizationUrl: https://www.dropbox.com/1/oauth2/authorize
    flow: implicit

# Error responses
responses:
  Unauthorized:
    description: |
        Bad or expired token. This can happen if the user or Dropbox revoked or expired an access token. To fix,
        you should re-authenticate the user.
    schema:
      $ref: '#/definitions/ErrorMessage'
  NotFound:
    description: The file wasn't found at the specified path, or wasn't found at the specified `rev`.
    schema:
      $ref: '#/definitions/ErrorMessage'
  Conflict:
    description: |
        The call failed because a conflict occurred. This means a file already existed at the specified path,
        `overwrite` was false, and the `parent_rev` (if specified) didn't match the current `rev`.
    schema:
      $ref: '#/definitions/ErrorMessage'
  LengthRequired:
    description: Missing `Content-Length` header (this endpoint doesn't support HTTP chunked transfer encoding).
    schema:
      $ref: '#/definitions/ErrorMessage'

# URL patterns
paths:
  /files/{root}/{path}:
    get:
      tags:
        - files
      produces:
        - application/octet-stream
      summary: Downloads a file.
      description: |
          Downloads a file.

          This method also supports [HTTP Range Retrieval Requests](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.2)
          to allow retrieving partial file contents.
      parameters:
        - name: root
          in: path
          type: string
          enum: [ 'auto', 'sandbox', 'dropbox' ]
          required: true
          description: |
              Root folder: `auto` - automatically determines the appropriate root folder using your app's permission
              level (recommended); `sandbox` - the codename for app folder level; `dropbox` - full dropbox access.
        - name: path
          in: path
          type: string
          required: true
          description: The path to the file you want to retrieve.
        - name: rev
          in: query
          type: string
          required: false
          description: The revision of the file to retrieve. This defaults to the most recent revision.
      responses:
        200:
          description: |
              The specified file's contents at the requested revision.

              The HTTP response contains the [content metadata](https://www.dropbox.com/developers/core/docs#metadata-details)
              in JSON format within an `x-dropbox-metadata` header.
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
      security:
        - dropbox_auth: []

  /files_put/{root}/{path}:
    put:
      tags:
        - files
      produces:
        - application/json
      summary: Uploads a file using PUT semantics.
      description: |
          Uploads a file using PUT semantics.

          The preferred HTTP method for this call is **PUT**. For compatibility with browser environments, the **POST**
          HTTP method is also recognized.

          **Note:** Providing a `Content-Length` header set to the size of the uploaded file is required so that the
          server can verify that it has received the entire file contents.

          **Note:** `/files_put` has a maximum file size limit of 150 MB and does not support uploads with chunked
          encoding. To upload larger files, use [/chunked_upload](https://www.dropbox.com/developers/core/docs#chunked-upload)
          instead.
      parameters:
        - name: root
          in: path
          type: string
          enum: [ 'auto', 'sandbox', 'dropbox' ]
          required: true
          description: |
              Root folder: `auto` - automatically determines the appropriate root folder using your app's permission
              level (recommended); `sandbox` - the codename for app folder level; `dropbox` - full dropbox access.
        - name: path
          in: path
          type: string
          required: true
          description: The full path to the file you want to write to. This parameter should *not* point to a folder.
        - name: locale
          in: query
          type: string
          required: false
          description: The metadata returned on successful upload will have its `size` field translated based on the given locale.
        - name: overwrite
          in: query
          type: boolean
          required: false
          description: |
              This value, either `true` (default) or `false`, determines whether an existing file will be overwritten
              by this upload. If `true`, any existing file will be overwritten. If `false`, the other parameters
              determine whether a conflict occurs and how that conflict is resolved.
        - name: parent_rev
          in: query
          type: string
          required: false
          description: |
              If present, this parameter specifies the revision of the file you're editing. If `parent_rev` matches the
              latest version of the file on the user's Dropbox, that file will be replaced. Otherwise, a conflict will
              occur. If you specify a `parent_rev` and that revision doesn't exist, the file won't save (error 400).
              You can get the most recent rev by performing a call to [/metadata](https://www.dropbox.com/developers/core/docs#metadata).
        - name: autorename
          in: query
          type: boolean
          required: false
          description: |
              This value, either `true` (default) or `false`, determines what happens when there is a conflict. If `true`,
              the file being uploaded will be automatically renamed to avoid the conflict. (For example, `test.txt` might
              be automatically renamed to `test (1).txt`.) The new name can be obtained from the returned metadata.
              If `false`, the call will fail with a 409 (Conflict) response code.
        - name: file_content
          in: body
          required: true
          description: |
              The file contents to be uploaded. Since the entire `PUT` body will be treated as the file, any parameters
              must be passed as part of the request URL. The request URL should be signed just as you would sign any
              other OAuth request URL.
          schema:
            type: file
      responses:
        200:
          description: |
              The metadata for the uploaded file. More information on the returned metadata fields are
              available [here](https://www.dropbox.com/developers/core/docs#metadata-details).
          schema:
            $ref: '#/definitions/FileMetadata'
        401:
          $ref: '#/responses/Unauthorized'
        409:
          $ref: '#/responses/Conflict'
        411:
          $ref: '#/responses/LengthRequired'
      security:
        - dropbox_auth: []

    post:
      tags:
        - files
      produces:
        - application/json
      summary: Uploads a file using PUT semantics.
      description: |
          Uploads a file using PUT semantics.

          The preferred HTTP method for this call is **PUT**. For compatibility with browser environments, the **POST**
          HTTP method is also recognized.

          **Note:** Providing a `Content-Length` header set to the size of the uploaded file is required so that the
          server can verify that it has received the entire file contents.

          **Note:** `/files_put` has a maximum file size limit of 150 MB and does not support uploads with chunked
          encoding. To upload larger files, use [/chunked_upload](https://www.dropbox.com/developers/core/docs#chunked-upload)
          instead.
      parameters:
        - name: root
          in: path
          type: string
          enum: [ 'auto', 'sandbox', 'dropbox' ]
          required: true
          description: |
              Root folder: `auto` - automatically determines the appropriate root folder using your app's permission
              level (recommended); `sandbox` - the codename for app folder level; `dropbox` - full dropbox access.
        - name: path
          in: path
          type: string
          required: true
          description: The full path to the file you want to write to. This parameter should *not* point to a folder.
        - name: locale
          in: query
          type: string
          required: false
          description: The metadata returned on successful upload will have its `size` field translated based on the given locale.
        - name: overwrite
          in: query
          type: boolean
          required: false
          description: |
              This value, either `true` (default) or `false`, determines whether an existing file will be overwritten
              by this upload. If `true`, any existing file will be overwritten. If `false`, the other parameters
              determine whether a conflict occurs and how that conflict is resolved.
        - name: parent_rev
          in: query
          type: string
          required: false
          description: |
              If present, this parameter specifies the revision of the file you're editing. If `parent_rev` matches the
              latest version of the file on the user's Dropbox, that file will be replaced. Otherwise, a conflict will
              occur. If you specify a `parent_rev` and that revision doesn't exist, the file won't save (error 400).
              You can get the most recent rev by performing a call to [/metadata](https://www.dropbox.com/developers/core/docs#metadata).
        - name: autorename
          in: query
          type: boolean
          required: false
          description: |
              This value, either `true` (default) or `false`, determines what happens when there is a conflict. If `true`,
              the file being uploaded will be automatically renamed to avoid the conflict. (For example, `test.txt` might
              be automatically renamed to `test (1).txt`.) The new name can be obtained from the returned metadata.
              If `false`, the call will fail with a 409 (Conflict) response code.
        - name: file_content
          in: body
          required: true
          description: |
              The file contents to be uploaded. Since the entire `PUT` body will be treated as the file, any parameters
              must be passed as part of the request URL. The request URL should be signed just as you would sign any
              other OAuth request URL.
          schema:
            type: file
      responses:
        200:
          description: |
              The metadata for the uploaded file. More information on the returned metadata fields are
              available [here](https://www.dropbox.com/developers/core/docs#metadata-details).
          schema:
            $ref: '#/definitions/FileMetadata'
        401:
          $ref: '#/responses/Unauthorized'
        409:
          $ref: '#/responses/Conflict'
        411:
          $ref: '#/responses/LengthRequired'
      security:
        - dropbox_auth: []

  /thumbnails/{root}/{path}:
    get:
      tags:
        - files
      produces:
        - application/octet-stream
      summary: Gets a thumbnail for an image.
      description: |
          Gets a thumbnail for an image.

          This method currently supports files with the following file extensions: .jpg, .jpeg, .png, .tiff, .tif, .gif, .bmp

          Photos that are larger than 20MB in size won't be converted to a thumbnail.
      parameters:
        - name: root
          in: path
          type: string
          enum: [ 'auto', 'sandbox', 'dropbox' ]
          required: true
          description: |
              Root folder: `auto` - automatically determines the appropriate root folder using your app's permission
              level (recommended); `sandbox` - the codename for app folder level; `dropbox` - full dropbox access.
        - name: path
          in: path
          type: string
          required: true
          description: The path to the image file you want to thumbnail.
        - name: format
          in: query
          type: string
          enum:
            - jpeg
            - png
          required: false
          description: |
              For images that are photos, `jpeg` (default) should be preferred, while `png` is better for screenshots and digital art.
        - name: size
          in: query
          type: string
          enum: [ 'xs', 's', 'm', 'l', 'xl' ]
          required: false
          description: Default size is `s`. Sizes in pixels are `xs` - 32x32, `s` - 64x64, `m` - 128x128, `l` - 640x480, `xl` - 1024x768
      responses:
        200:
          description: |
              A thumbnail of the specified image's contents. The image returned may be larger or smaller than the size
              requested, depending on the size and aspect ratio of the original image.

              The HTTP response contains the [content metadata](https://www.dropbox.com/developers/core/docs#metadata-details)
              in JSON format within an `x-dropbox-metadata` header.
        401:
          $ref: '#/responses/Unauthorized'
        404:
          description: The file path wasn't found or the file extension doesn't allow conversion to a thumbnail.
          schema:
            $ref: '#/definitions/ErrorMessage'
        415:
          description: The image is invalid and cannot be converted to a thumbnail.
          schema:
            $ref: '#/definitions/ErrorMessage'
      security:
        - dropbox_auth: []

  /previews/{root}/{path}:
    get:
      tags:
        - files
      produces:
        - application/pdf
        - text/html
      summary: Gets a preview for a file.
      description: |
          Gets a preview for a file.

          Previews are only generated for the files with the following extensions: .doc, .docx, .docm, .ppt, .pps,
          .ppsx, .ppsm, .pptx, .pptm, .xls, .xlsx, .xlsm, .rtf
      parameters:
        - name: root
          in: path
          type: string
          enum: [ 'auto', 'sandbox', 'dropbox' ]
          required: true
          description: |
              Root folder: `auto` - automatically determines the appropriate root folder using your app's permission
              level (recommended); `sandbox` - the codename for app folder level; `dropbox` - full dropbox access.
        - name: path
          in: path
          type: string
          required: true
          description: The absolute path to the file you want to preview.
        - name: rev
          in: query
          type: string
          required: false
          description: The revision of the file to retrieve. This defaults to the most recent revision.
      responses:
        200:
          description: |
              Data that represents a preview of the file. The Content-Type header will be either `application/pdf` or
              `text/html`. There is a `Original-Content-Length` header which contains the size of the preview data.
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        409:
          description: No preview has been generated yet or unable to generate a preview for the file.
          schema:
            $ref: '#/definitions/ErrorMessage'
      security:
        - dropbox_auth: []

  /chunked_upload:
    put:
      tags:
        - files
      produces:
        - application/json
      summary: Uploads large files to Dropbox in multiple chunks.
      description: |
          Uploads large files to Dropbox in multiple chunks. Also has the ability to resume if the upload is interrupted.
          This allows for uploads larger than the `/files_put` maximum of 150 MB.

          Typical usage:
            1. Send a PUT request to `/chunked_upload` with the first chunk of the file without setting `upload_id`, and
            receive an `upload_id` in return.
            2. Repeatedly `PUT` subsequent chunks using the `upload_id` to identify the upload in progress and an `offset`
            representing the number of bytes transferred so far.
            3. After each chunk has been uploaded, the server returns a new offset representing the total amount transferred.
            4. After the last chunk, `POST` to `/commit_chunked_upload` to complete the upload.

          Chunks can be any size up to 150 MB. A typical chunk is 4 MB. Using large chunks will mean fewer calls
          to `/chunked_upload` and faster overall throughput. However, whenever a transfer is interrupted, you will
          have to resume at the beginning of the last chunk, so it is often safer to use smaller chunks.

          If the offset you submit does not match the expected offset on the server, the server will ignore the request
          and respond with a 400 error that includes the current offset. To resume upload, seek to the correct offset
          (in bytes) within the file and then resume uploading from that point.

          A chunked upload can take a maximum of 48 hours before expiring.
      parameters:
        - name: upload_id
          in: query
          type: string
          required: false
          description: |
              The unique ID of the in-progress upload on the server. If left blank, the server will create a new
              upload session.
        - name: offset
          in: query
          type: integer
          format: int64
          required: false
          description: |
              The byte offset of this chunk, relative to the beginning of the full file. The server will verify that
              this matches the offset it expects. If it does not, the server will return an error with the expected
              offset.
        - name: file_content
          in: body
          required: true
          description: |
              A chunk of data from the file being uploaded. If resuming, the chunk should begin at the number of bytes
              into the file that equals the `offset`.
          schema:
            type: file
      responses:
        200:
          description: |
              Data that represents a preview of the file. The Content-Type header will be either `application/pdf` or
              `text/html`. There is a `Original-Content-Length` header which contains the size of the preview data.
          schema:
            $ref: '#/definitions/ChunkedUploadInfo'
        400:
          description: |
              The `offset` parameter does not match up with what the server expects. The body of the error response
              will be JSON similar to the above, indicating the correct `offset` to upload.
          schema:
            $ref: '#/definitions/ChunkedUploadError'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          description: The `upload_id` does not exist or has expired.
          schema:
            $ref: '#/definitions/ErrorMessage'
      security:
        - dropbox_auth: []

  /commit_chunked_upload/{root}/{path}:
    post:
      tags:
        - files
      produces:
        - application/json
      summary: Completes an upload initiated by the chunked upload method.
      description: |
          Completes an upload initiated by the `/chunked_upload` method. Saves a file uploaded via `/chunked_upload` to
          a user's Dropbox.

          `/commit_chunked_upload` is similar to `/files_put`. The main difference is that while `/files_put` takes the
          file contents in the request body, `/commit_chunked_upload` takes a parameter `upload_id`, which is obtained
          when the file contents are uploaded via `/chunked_upload`.
      parameters:
        - name: root
          in: path
          type: string
          enum: [ 'auto', 'sandbox', 'dropbox' ]
          required: true
          description: |
              Root folder: `auto` - automatically determines the appropriate root folder using your app's permission
              level (recommended); `sandbox` - the codename for app folder level; `dropbox` - full dropbox access.
        - name: path
          in: path
          type: string
          required: true
          description: The full path to the file you want to write to. This parameter should not point to a folder.
        - name: locale
          in: query
          type: string
          required: false
          description: |
              The metadata returned on successful upload will have its `size` field translated based on the given locale.
        - name: overwrite
          in: query
          type: boolean
          required: false
          description: |
              This value, either `true` (default) or `false`, determines whether an existing file will be overwritten by
              this upload. If `true`, any existing file will be overwritten. If `false`, the other parameters determine
              whether a conflict occurs and how that conflict is resolved.
        - name: parent_rev
          in: query
          type: string
          required: false
          description: |
              If present, this parameter specifies the revision of the file you're editing. If `parent_rev` matches the
              latest version of the file on the user's Dropbox, that file will be replaced. Otherwise, a conflict will
              occur. If you specify a `parent_rev` and that revision doesn't exist, the file won't save (error 400).
              You can get the most recent `rev` by performing a call to [/metadata](https://www.dropbox.com/developers/core/docs#metadata).
        - name: autorename
          in: query
          type: boolean
          required: false
          description: |
              This value, either `true` (default) or `false`, determines what happens when there is a conflict. If `true`,
              the file being uploaded will be automatically renamed to avoid the conflict. (For example, `test.txt` might
              be automatically renamed to `test (1).txt`.) The new name can be obtained from the returned metadata.
              If `false`, the call will fail with a 409 (Conflict) response code.
        - name: upload_id
          in: query
          type: string
          required: true
          description: Used to identify the chunked upload session you'd like to commit.
      responses:
        200:
          description: |
              The metadata for the uploaded file. More information on the returned metadata fields are
              available [here](https://www.dropbox.com/developers/core/docs#metadata-details).
          schema:
            $ref: '#/definitions/FileMetadata'
        400:
          description: |
              Returned if the request does not contain an `upload_id` or if there is no chunked upload matching
              the given `upload_id`.
          schema:
            $ref: '#/definitions/ErrorMessage'
        401:
          $ref: '#/responses/Unauthorized'
        409:
          $ref: '#/responses/Conflict'
      security:
        - dropbox_auth: []

# Model
definitions:
  ErrorMessage:
    type: object
    required:
      - error
    properties:
      error:
        type: string
        description: Error description

  FileMetadata:
    type: object
    required:
      - size
      - bytes
      - path
      - is_dir
      - rev
      - thumb_exists
      - icon
      - mime_type
      - modified
      - root
      - revision
    properties:
      size:
        type: string
        description: A human-readable description of the file size (translated by [locale](https://www.dropbox.com/developers/core/docs#param.locale))
      bytes:
        type: integer
        format: int64
        description: The file size in bytes
      path:
        type: string
        description: Returns the canonical path to the file or folder
      is_dir:
        type: boolean
        description: Whether the given entry is a folder or not
      is_deleted:
        type: boolean
        description: Whether the given entry is deleted (only included if deleted files are being returned)
      rev:
        type: string
        description: |
            A unique identifier for the current revision of a file; this field is the same `rev` as elsewhere in
            the API and can be used to detect changes and avoid conflicts.
      thumb_exists:
        type: boolean
        description: |
            `true` if the file is an image that can be converted to a thumbnail via the
            [/thumbnails](https://www.dropbox.com/developers/core/docs#thumbnails) call
      icon:
        type: string
        description: |
            The name of the icon used to illustrate the file type in Dropbox's
            [icon library](https://www.dropbox.com/static/images/dropbox-api-icons.zip)
      mime_type:
        type: string
        description: MIME type of a file
      modified:
        type: string
        description: |
            The last time the file was modified on Dropbox, in the standard
            [date format](https://www.dropbox.com/developers/core/docs#date-format) (not included for the root folder)
      root:
        type: string
        description: |
            The root or top-level folder depending on your [access level](https://www.dropbox.com/developers/reference/devguide#app-permissions);
            all paths returned are relative to this root level; permitted values are either `dropbox` or `app_folder`
      revision:
        type: integer
        description: A **deprecated** field that semi-uniquely identifies a file; use `rev` instead

  ChunkedUploadInfo:
    type: object
    required:
      - upload_id
      - offset
      - expires
    properties:
      upload_id:
        type: string
        description: The unique ID of the in-progress upload on the server
      offset:
        type: integer
        format: int64
        description: The total amount of bytes transferred to the server for this upload session
      expires:
        type: string
        description: The time this upload session will expire at in the standard [date format](https://www.dropbox.com/developers/core/docs#date-format)

  ChunkedUploadError:
    type: object
    required:
      - upload_id
      - offset
      - expires
      - error
    properties:
      upload_id:
        type: string
        description: The unique ID of the in-progress upload on the server
      offset:
        type: integer
        format: int64
        description: The total amount of bytes transferred to the server for this upload session
      expires:
        type: string
        description: The time this upload session will expire at in the standard [date format](https://www.dropbox.com/developers/core/docs#date-format)
      error:
        type: string
        description: Error description
